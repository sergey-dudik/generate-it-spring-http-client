{%-set camel_case_operation = _.camelCase(_.deburr(operation_name)).replace(' ','')-%}
{%-set pascal_case_operation = ucFirst(camel_case_operation)-%}
package com.acrontum.clients;
package com.acrontum.dtos;

{#
    Formats the text into camel case.
#}
{% macro camelCase(text) -%}
{{ _.camelCase(_.deburr(text)).replace(' ','') }}
{%- endmacro -%}

{#
    This macro is responsible for generating the parameter definitions of the methods, defining the
    annotations, types and variable names. eg: @RequestParam String paramName.
    @param input A union of the body and all parameters.
    @param path The current path of the swagger
#}
{%- macro javaParametersDefinition(input=[], path={}) -%}
    {%- for param in input %}
        {%- if _.includes(['body', 'formData'], param['in']) %}
            @RequestBody @javax.validation.Valid {{ toDto(findJavaTypeForBody(path)) }} {{ camelCase(param.name) }}
        {%- elseif param['in'] == 'path' %}
            @PathVariable("{{ param.name }}") {{ schemaToJavaType(param.schema) or 'String' }} {{ camelCase(param.name) }}
        {%- else %}
            @RequestParam(name = "{{ param.name }}", required = {{ param.required or false }} {%- if param.schema.default -%}, defaultValue="{{ param.schema.default }}" {%- endif -%}) {{ schemaToJavaType(param.schema) or 'String' }} {{ camelCase(param.name) }}
        {%- endif -%}
        {{ ',' if not loop.last }}
    {%- endfor -%}
{%- endmacro -%}

{#
    This macro is responsible for listing all parameters in order.
    @param input A union of the body and all parameters.
    @param path The current path of the swagger
#}
{%- macro javaParametersCall(input=[], path={}) -%}
{%- for param in input %}
    {%- if _.includes(['body', 'formData'], param['in']) -%}
        this.{{ camel_case_operation }}Mapper.toEntity({{ camelCase(param.name) }})
    {%- else -%}
        {{ camelCase(param.name) }}
    {%- endif -%}
    {{ ', ' if not loop.last }}
{%- endfor -%}
{%- endmacro -%}

{#
    This macro is responsible for creating the method
    @param op The current operation of the swagger
    @param path The current path of the swagger
    @param method The method name
#}
{%- macro javaMethod(op, path, method) -%}
    {%-set javaMethodName = path.operationId or (method + pascal_case_operation)%}
    {%-set javaReturn = findJavaTypeForResponse(path) or 'void' %}
    {%-set modelName = pascal_case_operation %}
    {%-set input = _.sortBy(path.parameters, ['in']) %}
    {%-set springPath = swaggerToSpringPath(op.path_name) %}
    /**
     * Summary: {{ path.summary }}.
     * Description: {{ path.description }}.
     *
    {%- for param in input %}
     * @param {{ camelCase(param.name) }} {{ trim(param.description) or 'The ' + camelCase(param.name)}}
    {%- endfor %}
     */
    @{{ ucFirst(method) }}Mapping("{{ springPath }}")
    public {{ 'com.acrontum.template.dtos.' if javaReturn !== 'void' }}{{ javaReturn }}{{ 'Dto' if javaReturn !== 'void' }} {{ javaMethodName }}({{ javaParametersDefinition(input, path) }}
    ) {
        {% if javaReturn !== 'void' -%}{{ modelName }} {{ camel_case_operation }}Model = {% endif -%}this.{{ camel_case_operation }}Service.{{ javaMethodName }}({{ javaParametersCall(input) }});
        {% if javaReturn !== 'void' -%}
        return this.{{ camel_case_operation }}Mapper.to{{ javaReturn }}Dto({{ camel_case_operation }}Model);
        {%- endif %}
        return this.restTemplate.{{ ucFirst(method) }}ForObject({{ springPath }}, {{ 'com.acrontum.template.dtos.' if javaReturn !== 'void' }}{{ javaReturn }}{{ 'Dto' if javaReturn !== 'void' }});
    }
{%- endmacro -%}

/**
 * The type {{ pascal_case_operation }} controller.
 */
@Component
@RequiredArgsConstructor
public class {{ pascal_case_operation }}Client extends AcrontumHttpClient {

    private final RestTemplate restTemplate;

{%- for op in operations -%}
    {%- for method, path in op.path -%}
        {%- if isValidMethod(method) %}
    {{ javaMethod(op, path, method) }}
        {%- endif -%}
    {%- endfor -%}
{%- endfor %}

}